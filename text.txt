==================== ./manage.py ====================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'puddle.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


==================== ./script.py ====================
import os
import shutil

def copy_code_to_txt(input_directory, output_file):
    with open(output_file, 'w', encoding='utf-8') as output_txt:
        for root, dirs, files in os.walk(input_directory):
            for file in files:
                if file.endswith(".py"):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r', encoding='utf-8') as input_file:
                        output_txt.write(f"{'='*20} {file_path} {'='*20}\n")
                        output_txt.write(input_file.read())
                        output_txt.write("\n\n")
                        
# Замените 'input_directory' на путь к вашей директории и 'output_file' на путь и имя файла для сохранения кода
input_directory = './'
output_file = './text.txt'

copy_code_to_txt(input_directory, output_file)


==================== ./conversation\admin.py ====================
from django.contrib import admin

from .models import Conversation, ConversationMessage

admin.site.register(Conversation)
admin.site.register(ConversationMessage)


==================== ./conversation\apps.py ====================
from django.apps import AppConfig


class ConversationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'conversation'


==================== ./conversation\forms.py ====================
from django import forms

from .models import ConversationMessage

class ConversationMessageForm(forms.ModelForm):
    class Meta:
        model = ConversationMessage
        fields = ('content',)
        widgets = {
            'content': forms.Textarea(attrs={
                'class': 'w-full py-4 px-6 rounded-xl border'
            })
        }

==================== ./conversation\models.py ====================
from django.contrib.auth.models import User
from django.db import models

from item.models import Item

class Conversation(models.Model):
    item = models.ForeignKey(Item, related_name='conversations', on_delete=models.CASCADE)
    members = models.ManyToManyField(User, related_name='conversations')
    created_at = models.DateTimeField(auto_now_add=True)
    modified_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ('-modified_at',)
    
class ConversationMessage(models.Model):
    conversation = models.ForeignKey(Conversation, related_name='messages', on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(User, related_name='created_messages', on_delete=models.CASCADE)

==================== ./conversation\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./conversation\urls.py ====================
from django.urls import path

from . import views

app_name = 'conversation'

urlpatterns = [
    path('', views.inbox, name='inbox'),
    path('<int:pk>/', views.detail, name='detail'),
    path('new/<int:item_pk>/', views.new_conversation, name='new'),
]


==================== ./conversation\views.py ====================
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404, redirect

from item.models import Item

from .forms import ConversationMessageForm
from .models import Conversation

@login_required
def new_conversation(request, item_pk):
    item = get_object_or_404(Item, pk=item_pk)

    if item.created_by == request.user:
        return redirect('dashboard:index')
    
    conversations = Conversation.objects.filter(item=item).filter(members__in=[request.user.id])

    if conversations:
        return redirect('conversation:detail', pk=conversations.first().id)

    if request.method == 'POST':
        form = ConversationMessageForm(request.POST)

        if form.is_valid():
            conversation = Conversation.objects.create(item=item)
            conversation.members.add(request.user)
            conversation.members.add(item.created_by)
            conversation.save()

            conversation_message = form.save(commit=False)
            conversation_message.conversation = conversation
            conversation_message.created_by = request.user
            conversation_message.save()

            return redirect('item:detail', pk=item_pk)
    else:
        form = ConversationMessageForm()
    
    return render(request, 'conversation/new.html', {
        'form': form
    })

@login_required
def inbox(request):
    conversations = Conversation.objects.filter(members__in=[request.user.id])

    return render(request, 'conversation/inbox.html', {
        'conversations': conversations
    })

@login_required
def detail(request, pk):
    conversation = Conversation.objects.filter(members__in=[request.user.id]).get(pk=pk)

    if request.method == 'POST':
        form = ConversationMessageForm(request.POST)

        if form.is_valid():
            conversation_message = form.save(commit=False)
            conversation_message.conversation = conversation
            conversation_message.created_by = request.user
            conversation_message.save()

            conversation.save()

            return redirect('conversation:detail', pk=pk)
    else:
        form = ConversationMessageForm()

    return render(request, 'conversation/detail.html', {
        'conversation': conversation,
        'form': form
    })

==================== ./conversation\__init__.py ====================


==================== ./conversation\migrations\0001_initial.py ====================
# Generated by Django 4.1.5 on 2023-01-09 17:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('item', '0002_alter_category_options_item'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='item.item')),
                ('members', models.ManyToManyField(related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified_at',),
            },
        ),
        migrations.CreateModel(
            name='ConversationMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='conversation.conversation')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]


==================== ./conversation\migrations\__init__.py ====================


==================== ./core\admin.py ====================
from django.contrib import admin

# Register your models here.


==================== ./core\apps.py ====================
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'


==================== ./core\forms.py ====================
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User

class LoginForm(AuthenticationForm):
    username = forms.CharField(widget=forms.TextInput(attrs={
        'placeholder': 'Your username',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))
    password = forms.CharField(widget=forms.PasswordInput(attrs={
        'placeholder': 'Your password',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))

class SignupForm(UserCreationForm):
    class Meta:
        model = User
        fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2')
    
    username = forms.CharField(widget=forms.TextInput(attrs={
        'placeholder': 'Username',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))
    first_name = forms.CharField(widget=forms.TextInput(attrs={
        'placeholder': 'First Name',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))
    last_name = forms.CharField(widget=forms.TextInput(attrs={
        'placeholder': 'Last Name',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))
    email = forms.CharField(widget=forms.EmailInput(attrs={
        'placeholder': 'Email',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))
    password1 = forms.CharField(widget=forms.PasswordInput(attrs={
        'placeholder': 'Your password',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))
    password2 = forms.CharField(widget=forms.PasswordInput(attrs={
        'placeholder': 'Repeat password',
        'class': 'w-full py-4 px-6 rounded-xl'
    }))

==================== ./core\models.py ====================


==================== ./core\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./core\urls.py ====================
from django.contrib.auth import views as auth_views
from django.urls import path

from . import views
from .forms import LoginForm

app_name = 'core'

urlpatterns = [
    path('', views.index, name='index'),
    path('contact/', views.contact, name='contact'),
    path('signup/', views.signup, name='signup'),
    path('login/', auth_views.LoginView.as_view(template_name='core/login.html', authentication_form=LoginForm), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),

]


==================== ./core\views.py ====================
from django.shortcuts import render, redirect

from item.models import Category, Item

from .forms import SignupForm

def index(request):
    items = Item.objects.filter(is_sold=False)[0:6]
    categories = Category.objects.all()

    return render(request, 'core/index.html', {
        'categories': categories,
        'items': items,
    })

def contact(request):
    return render(request, 'core/contact.html')

def signup(request):
    if request.method == 'POST':
        form = SignupForm(request.POST)

        if form.is_valid():
            form.save()

            return redirect('/login/')
    else:
        form = SignupForm()

    return render(request, 'core/signup.html', {
        'form': form
    })

==================== ./core\__init__.py ====================


==================== ./core\migrations\__init__.py ====================


==================== ./dashboard\admin.py ====================
from django.contrib import admin

# Register your models here.


==================== ./dashboard\apps.py ====================
from django.apps import AppConfig


class DashboardConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'dashboard'


==================== ./dashboard\models.py ====================
from django.db import models

# Create your models here.


==================== ./dashboard\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./dashboard\urls.py ====================
from django.urls import path

from . import views

app_name = 'dashboard'

urlpatterns = [
    path('', views.index, name='index'),
]


==================== ./dashboard\views.py ====================
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404

from item.models import Item
from django.contrib.auth.models import User

@login_required
def index(request):
    items = Item.objects.filter(created_by=request.user)
    user = User.objects.get(username=request.user.username)

    return render(request, 'dashboard/index.html', {
        'items': items,
        'user': user,
    })


==================== ./dashboard\__init__.py ====================


==================== ./dashboard\migrations\__init__.py ====================


==================== ./item\admin copy.py ====================
from django.contrib import admin
from django import forms
from .models import Category, Item
import json

class CategoryAdminForm(forms.ModelForm):
    en_name = forms.CharField(label='English Name', max_length=255, required=False)
    kk_name = forms.CharField(label='Kazakh Name', max_length=255, required=False)
    ru_name = forms.CharField(label='Russian Name', max_length=255, required=False)
    json_data = forms.CharField(label='JSON Data', widget=forms.Textarea, required=False)

    class Meta:
        model = Category
        fields = ['en_name', 'kk_name', 'ru_name', 'json_data']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance:
            self.fields['en_name'].initial = self.instance.get_name('en')
            self.fields['kk_name'].initial = self.instance.get_name('kk')
            self.fields['ru_name'].initial = self.instance.get_name('ru')
            self.fields['json_data'].initial = json.dumps(self.instance.name_translations, ensure_ascii=False)

    def save(self, commit=True):
        instance = super().save(commit=False)
        en_name = self.cleaned_data.get('en_name')
        kk_name = self.cleaned_data.get('kk_name')
        ru_name = self.cleaned_data.get('ru_name')
        json_data = self.cleaned_data.get('json_data')

        if en_name and kk_name and ru_name:
            instance.name_translations = {
                'en': en_name,
                'kk': kk_name,
                'ru': ru_name,
            }
        elif json_data:
            instance.name_translations = json.loads(json_data)

        if commit:
            instance.save()
        return instance

class CategoryAdmin(admin.ModelAdmin):
    form = CategoryAdminForm

    list_display = ['name', 'display_image']
    search_fields = ['name']
    fields = ['name', 'image', 'en_name', 'kk_name', 'ru_name', 'json_data']
    def display_image(self, obj):
        return obj.image.url if obj.image else None
    display_image.short_description = 'Image'

admin.site.register(Category, CategoryAdmin)
admin.site.register(Item)


==================== ./item\admin.py ====================
from django.contrib import admin
from .models import Category, Item
from modeltranslation.admin import TranslationAdmin

class CategoryAdmin(TranslationAdmin):
    pass

admin.site.register(Category, CategoryAdmin)
admin.site.register(Item)

==================== ./item\apps.py ====================
from django.apps import AppConfig


class ItemConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'item'


==================== ./item\forms.py ====================
from django import forms
from django.core.validators import MinValueValidator
from django.utils.translation import gettext_lazy as _
from .models import Item, Category

INPUT_CLASSES = 'w-full py-4 px-6 rounded-xl border'

class CategoryChoiceField(forms.ModelChoiceField):
    def __init__(self, *args, **kwargs):
        self.language_code = kwargs.pop('language_code', None)
        super().__init__(*args, **kwargs)

    def label_from_instance(self, obj):
        return getattr(obj, f'name_{self.language_code}', obj.name)

class NewItemForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        language_code = kwargs.pop('language_code', None)
        super().__init__(*args, **kwargs)
        self.fields['category'] = CategoryChoiceField(queryset=Category.objects.all(), empty_label=_('Select a category'), language_code=language_code)
        self.fields['price'].required = False
        self.fields['price'].validators.append(MinValueValidator(0))

    class Meta:
        model = Item
        fields = ('category', 'name', 'author', 'publisher', 'language', 'condition', 'cover_type', 'description', 'price', 'is_swap', 'image', 'image1', 'image2', 'image3',)
        widgets = {
            'category': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Категория')}),
            'name': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Название')}),
            'author': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Автор')}),
            'publisher': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Издательство')}),
            'language': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Язык')}),
            'condition': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Состояние')}),
            'cover_type': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Тип обложки')}),
            'description': forms.Textarea(attrs={'class': INPUT_CLASSES, 'placeholder': _('Описание')}),
            'price': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Цена')}),
            'image': forms.FileInput(attrs={'class': INPUT_CLASSES}),
            'image1': forms.FileInput(attrs={'class': INPUT_CLASSES}),
            'image2': forms.FileInput(attrs={'class': INPUT_CLASSES}),
            'image3': forms.FileInput(attrs={'class': INPUT_CLASSES}),
        }

class EditItemForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        language_code = kwargs.pop('language_code', None)
        super().__init__(*args, **kwargs)
        self.fields['category'] = CategoryChoiceField(queryset=Category.objects.all(), empty_label=_('Select a category'), language_code=language_code)
        self.fields['price'].required = False
        self.fields['price'].validators.append(MinValueValidator(0))
    class Meta:
        model = Item
        fields = ('category', 'name', 'author', 'publisher', 'language', 'condition', 'cover_type', 'description', 'price', 'is_swap', 'image', 'image1', 'image2', 'image3', 'is_sold')
        widgets = {
            'category': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Категория')}),
            'name': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Название')}),
            'author': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Автор')}),
            'publisher': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Издательство')}),
            'language': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Язык')}),
            'condition': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Состояние')}),
            'cover_type': forms.Select(attrs={'class': INPUT_CLASSES, 'placeholder': _('Тип обложки')}),
            'description': forms.Textarea(attrs={'class': INPUT_CLASSES, 'placeholder': _('Описание')}),
            'price': forms.TextInput(attrs={'class': INPUT_CLASSES, 'placeholder': _('Цена')}),
            'image': forms.FileInput(attrs={'class': INPUT_CLASSES}),
            'image1': forms.FileInput(attrs={'class': INPUT_CLASSES}),
            'image2': forms.FileInput(attrs={'class': INPUT_CLASSES}),
            'image3': forms.FileInput(attrs={'class': INPUT_CLASSES}),
        }


==================== ./item\models.py ====================
from django.core.validators import MinValueValidator
from django.contrib.auth.models import User
from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=255)
    image = models.ImageField(upload_to='category_images', blank=False, default='default.jpg')

    class Meta:
        ordering = ('name',)
        verbose_name_plural = 'Categories'
    
    def __str__(self):
        return self.name
    

class Item(models.Model):
    CONDITION_CHOICES = [
        ('Н', 'Новая'),
        ('О', 'Отличное'),
        ('Х', 'Хорошее'),
        ('С', 'Среднее'),
        ('П', 'Плохое'),
    ]
    
    COVER_CHOICES = [
        ('Т', 'Твердый переплет'),
        ('М', 'Мягкая обложка'),
        ('К', 'Переплет из картона'),
        ('И', 'Интегральный переплет'),
        ('С', 'Суперобложка'),
        ('Д', 'Другой'),
    ]

    LANGUAGE_CHOICES = [
        ('RU', 'Русский'),
        ('KZ', 'Казахский'),
        ('EN', 'Английский'),
        ('OT', 'Другой'),
    ]

    category = models.ForeignKey(Category, related_name='items', on_delete=models.CASCADE)
    created_by = models.ForeignKey(User, related_name='items', on_delete=models.CASCADE)

    name = models.CharField(max_length=255)
    author = models.CharField(max_length=255)
    publisher = models.CharField(max_length=100, verbose_name="Издательство")
    
    language = models.CharField(max_length=2, choices=LANGUAGE_CHOICES, verbose_name="Язык")
    condition = models.CharField(max_length=1, choices=CONDITION_CHOICES, verbose_name="Состояние книги")
    cover_type = models.CharField(max_length=1, choices=COVER_CHOICES, verbose_name="Переплет")

    description = models.TextField(blank=True, null=True)

    price = models.DecimalField(blank=True, null=True, max_digits=7, decimal_places=0, validators=[MinValueValidator(0)], verbose_name="Цена")
    image = models.ImageField(upload_to='item_images/', blank=True, null=True)
    
    image1 = models.ImageField(upload_to='item_images/', blank=True, null=True)
    image2 = models.ImageField(upload_to='item_images/', blank=True, null=True)
    image3 = models.ImageField(upload_to='item_images/', blank=True, null=True)

    is_sold = models.BooleanField(default=False)
    is_swap = models.BooleanField(default=False)
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "Книга"
        verbose_name_plural = "Книги"

==================== ./item\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./item\translation.py ====================
from modeltranslation.translator import translator, TranslationOptions
from .models import Category

class CategoryTranslationOptions(TranslationOptions):
    fields = ('name',)

translator.register(Category, CategoryTranslationOptions)

==================== ./item\urls.py ====================
from django.urls import path

from . import views

app_name = 'item'

urlpatterns = [
    path('', views.items, name='items'),
    path('new/', views.new, name='new'),
    path('<int:pk>/', views.detail, name='detail'),
    path('<int:pk>/delete/', views.delete, name='delete'),
    path('<int:pk>/edit/', views.edit, name='edit'),
]


==================== ./item\views.py ====================
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.shortcuts import render, get_object_or_404, redirect

from .forms import NewItemForm, EditItemForm
from .models import Category, Item

def items(request):
    query = request.GET.get('query', '')
    category_id = request.GET.get('category', 0)
    categories = Category.objects.all()
    items = Item.objects.filter(is_sold=False)

    if category_id:
        items = items.filter(category_id=category_id)

    if query:
        items = items.filter(Q(name__icontains=query) | Q(description__icontains=query))

    return render(request, 'item/items.html', {
        'items': items,
        'query': query,
        'categories': categories,
        'category_id': int(category_id)
    })

def detail(request, pk):
    item = get_object_or_404(Item, pk=pk)
    related_items = Item.objects.filter(category=item.category, is_sold=False).exclude(pk=pk)[0:3]

    return render(request, 'item/detail.html', {
        'item': item,
        'related_items': related_items
    })

@login_required
def new(request):
    if request.method == 'POST':
        form = NewItemForm(request.POST, request.FILES)

        if form.is_valid():
            item = form.save(commit=False)
            item.created_by = request.user
            item.save()

            return redirect('item:detail', pk=item.id)
    else:
        form = NewItemForm()

    return render(request, 'item/form.html', {
        'form': form,
        'title': 'New item',
        
    })

@login_required
def edit(request, pk):
    item = get_object_or_404(Item, pk=pk, created_by=request.user)

    if request.method == 'POST':
        form = EditItemForm(request.POST, request.FILES, instance=item)

        if form.is_valid():
            form.save()

            return redirect('item:detail', pk=item.id)
    else:
        form = EditItemForm(instance=item)

    return render(request, 'item/form.html', {
        'form': form,
        'title': 'Edit item',
    })

@login_required
def delete(request, pk):
    item = get_object_or_404(Item, pk=pk, created_by=request.user)
    item.delete()

    return redirect('dashboard:index')

==================== ./item\__init__.py ====================


==================== ./item\migrations\0001_initial.py ====================
# Generated by Django 4.1.5 on 2023-01-08 18:11

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
    ]


==================== ./item\migrations\0002_alter_category_options_item.py ====================
# Generated by Django 4.1.5 on 2023-01-08 18:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('item', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='category',
            options={'ordering': ('name',), 'verbose_name_plural': 'Categories'},
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.FloatField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='item_images')),
                ('is_sold', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='item.category')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]


==================== ./item\migrations\0003_category_image_category_name_en_category_name_kk_and_more.py ====================
# Generated by Django 5.0.6 on 2024-05-08 11:50

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0002_alter_category_options_item'),
    ]

    operations = [
        migrations.AddField(
            model_name='category',
            name='image',
            field=models.ImageField(default='default.jpg', upload_to='category_images'),
        ),
        migrations.AddField(
            model_name='category',
            name='name_en',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='category',
            name='name_kk',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='category',
            name='name_ru',
            field=models.CharField(max_length=255, null=True),
        ),
    ]


==================== ./item\migrations\0004_alter_item_options_rename_created_by_item_seller_and_more.py ====================
# Generated by Django 4.2.5 on 2024-05-13 03:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0003_category_image_category_name_en_category_name_kk_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='item',
            options={'verbose_name': 'Книга', 'verbose_name_plural': 'Книги'},
        ),
        migrations.RenameField(
            model_name='item',
            old_name='created_by',
            new_name='seller',
        ),
        migrations.AddField(
            model_name='item',
            name='author',
            field=models.CharField(default=134, max_length=255),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='item',
            name='condition',
            field=models.CharField(choices=[('Н', 'Новая'), ('О', 'Отличное'), ('Х', 'Хорошее'), ('С', 'Среднее'), ('П', 'Плохое')], default=41, max_length=1, verbose_name='Состояние книги'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='item',
            name='cover_type',
            field=models.CharField(choices=[('Т', 'Твердый переплет'), ('М', 'Мягкая обложка'), ('К', 'Переплет из картона'), ('И', 'Интегральный переплет'), ('С', 'Суперобложка'), ('Д', 'Другой')], default=1, max_length=1, verbose_name='Переплет'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='item',
            name='image1',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/<django.db.models.fields.related.ForeignKey>/images/'),
        ),
        migrations.AddField(
            model_name='item',
            name='image2',
            field=models.ImageField(blank=True, null=True, upload_to='item_images'),
        ),
        migrations.AddField(
            model_name='item',
            name='image3',
            field=models.ImageField(blank=True, null=True, upload_to='item_images'),
        ),
        migrations.AddField(
            model_name='item',
            name='language',
            field=models.CharField(choices=[('RU', 'Русский'), ('KZ', 'Казахский'), ('EN', 'Английский'), ('OT', 'Другой')], default=1, max_length=2, verbose_name='Язык'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='item',
            name='publisher',
            field=models.CharField(default=1, max_length=100, verbose_name='Издательство'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='item',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/<django.db.models.fields.related.ForeignKey>/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='price',
            field=models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Цена'),
        ),
    ]


==================== ./item\migrations\0005_rename_seller_item_created_by.py ====================
# Generated by Django 4.2.5 on 2024-05-13 03:49

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0004_alter_item_options_rename_created_by_item_seller_and_more'),
    ]

    operations = [
        migrations.RenameField(
            model_name='item',
            old_name='seller',
            new_name='created_by',
        ),
    ]


==================== ./item\migrations\0006_item_is_swap_alter_item_image_alter_item_image1_and_more.py ====================
# Generated by Django 4.2.5 on 2024-05-13 04:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0005_rename_seller_item_created_by'),
    ]

    operations = [
        migrations.AddField(
            model_name='item',
            name='is_swap',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='item',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image1',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image2',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image3',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
    ]


==================== ./item\migrations\0007_alter_item_price.py ====================
# Generated by Django 4.2.5 on 2024-05-13 05:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0006_item_is_swap_alter_item_image_alter_item_image1_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='item',
            name='price',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Цена'),
        ),
    ]


==================== ./item\migrations\0008_alter_item_price.py ====================
# Generated by Django 4.2.5 on 2024-05-13 05:09

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0007_alter_item_price'),
    ]

    operations = [
        migrations.AlterField(
            model_name='item',
            name='price',
            field=models.DecimalField(blank=True, decimal_places=0, max_digits=7, null=True, verbose_name='Цена'),
        ),
    ]


==================== ./item\migrations\0009_alter_item_price.py ====================
# Generated by Django 4.2.5 on 2024-05-13 05:16

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0008_alter_item_price'),
    ]

    operations = [
        migrations.AlterField(
            model_name='item',
            name='price',
            field=models.DecimalField(blank=True, decimal_places=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена'),
        ),
    ]


==================== ./item\migrations\0010_alter_item_image_alter_item_image1_alter_item_image2_and_more.py ====================
# Generated by Django 4.2.5 on 2024-05-13 05:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0009_alter_item_price'),
    ]

    operations = [
        migrations.AlterField(
            model_name='item',
            name='image',
            field=models.ImageField(default='default.jpg', upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image1',
            field=models.ImageField(default='default.jpg', upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image2',
            field=models.ImageField(default='default.jpg', upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image3',
            field=models.ImageField(default='default.jpg', upload_to='item_images/'),
        ),
    ]


==================== ./item\migrations\0011_alter_item_image_alter_item_image1_alter_item_image2_and_more.py ====================
# Generated by Django 4.2.5 on 2024-05-15 04:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('item', '0010_alter_item_image_alter_item_image1_alter_item_image2_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='item',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image1',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image2',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='image3',
            field=models.ImageField(blank=True, null=True, upload_to='item_images/'),
        ),
    ]


==================== ./item\migrations\__init__.py ====================


==================== ./puddle\asgi.py ====================
"""
ASGI config for puddle project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'puddle.settings')

application = get_asgi_application()


==================== ./puddle\settings.py ====================
"""
Django settings for puddle project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j4ippt+3h39u4ontllpc8a(4h&^god(7aicz#@q^sl_(w)2otp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', 'http://192.168.253.51:8000/']

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


# Application definition

INSTALLED_APPS = [
    'modeltranslation', # model translation

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rosetta', # translation
    'livereload', # dev

    'conversation',
    'core',
    'dashboard',
    'item',

    'tailwind', # styles
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', #
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'livereload.middleware.LiveReloadScript', # dev

]

ROOT_URLCONF = 'puddle.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'puddle.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ('ru', 'Russian'),
    ('kk', 'Kazakh'),
    ("en", "English"),
    # Add more languages if needed
]

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

MODELTRANSLATION_DEFAULT_LANGUAGE = 'ru'
MODELTRANSLATION_TRANSLATION_REGISTRY = 'PUDDLE.translation'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Tailwind CSS

TAILWIND_APP_NAME = 'core'

INTERNAL_IPS = [
    "127.0.0.1",
]

NPM_BIN_PATH = "C:/Program Files/nodejs/npm.cmd"

==================== ./puddle\urls.py ====================
from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import path, include

from django.views.generic.base import RedirectView

urlpatterns = [
    path('favicon.ico/', RedirectView.as_view(url='/static/img/reread-logo.ico', permanent=True), name='favicon'),
    path('i18n/', include('django.conf.urls.i18n')),
    path('rosetta/', include('rosetta.urls')),
    
    path('', include('core.urls')),
    path('items/', include('item.urls')),
    path('dashboard/', include('dashboard.urls')),
    path('inbox/', include('conversation.urls')),
    path('admin/', admin.site.urls),

    
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


==================== ./puddle\wsgi.py ====================
"""
WSGI config for puddle project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'puddle.settings')

application = get_wsgi_application()


==================== ./puddle\__init__.py ====================


